title,question,answer,labelUtility classes are evil?,"I saw this thread 
If a ""Utilities"" class is evil, where do I put my generic code?
and thought why are utility classes evil?  
Lets say I have a domain model that is dozens of classes deep.  I need to be able to xml-ify instances.  Do I make a toXml method on the parent?  Do I make a MyDomainXmlUtility.toXml helper class?  This is a case where the business need spans the entire domain model -- does it really belong as an instance method?  What about if there are a bunch of auxiliary methods on the xml functionality of the application?
","Utility classes aren't exactly evil, but they can violate the principles that compose a good object-oriented design. In a good object-oriented design, most classes should represent a single thing and all of its attributes and operations. If you are operating on a thing, that method should probably be a member of that thing.
However, there are times when you can use utility classes to group a number of methods together - an example being the  class which provides a number of utilities that can be used on any Java Collection. These aren't specific to one particular type of Collection, but instead implement algorithms that can be used on any Collection.
Really, what you need to do is think about your design and determine where it makes the most sense to put the methods. Usually, it's as operations inside of a class. However, sometimes, it is indeed as a utility class. When you do use a utility class, however, don't just throw random methods into it, instead, organize the methods by purpose and functionality.
",1How to respond when you are asked for an estimate?,"We, as programmers, are constantly being asked 'How long will it take'?
And you know, the situation is almost always like this:

The requirements are unclear. Nobody has done an in depth analysis of all the implications.
The new feature will probably break some assumptions you made in your code and you start thinking immediately of all the things you might have to refactor. 
You have other things to do from past assignments and you will have to come up with an estimate that takes that other work into account.
The 'done' definition is probably unclear: When will it be done? 'Done' as in just finished coding it, or 'done' as in ""the users are using it""?
No matter how conscious you are of all these things, sometimes your ""programmer's pride"" makes you give/accept shorter times than you originally suppose it might take. Specially when you feel the pressure of deadlines and management expectations.

Many of these are organizational or cultural issues that are not simple and easy to solve, but in the end the reality is that you are being asked for an estimate and they expect you to give a reasonable answer. It's part of your job. You cannot simply say: I don't know. 
As a result, I always end up giving estimates that I later realize I cannot fulfill. It has happened countless of times, and I always promise it won't happen again. But it does.
What is your personal process for deciding and delivering an estimate? What techniques have you found useful?
","Software estimation is the most difficult single task in software engineering- a close second being requirements elicitation.
There are a lot of tactics for creating them, all based on getting good requirements first.  But when your back's against the wall and they refuse to give you better details, Fake It:

Take a good look at the requirements you have.
Make assumptions to fill in the gaps based on your best guess of what they want
Write down all your assumptions
Make them sit down, read, and agree to your assumptions (or, if you're lucky, get them to give in and give you real requirements).  
Now you have detailed requirements that you can estimate from.

It's like my mother used to threaten when I was a kid ""Hurry up and pick out some clothes, or I'll pick them out for you!""
",1dependency inversion in top class (main),"i want to create an app in which i have these two classes, MainApp and Model (in reality more, but this is the base and the core of the problem). MainApp is also the starting class. I want to apply dependency inversion so mainApp doesn't have to be rebuild each time Model changes (Well, mainly because its good practice). I can't do this:

because i'd have to create Model in MainApp anyway because it's the start of my app, it would be redundant.
I was thinking about shifting the contents of MainApp to another class and use MainApp just as factory for MainAppContents and Model, like this:

Is this the correct approach and does this mean that any start of a well designed app is a factory?
","If you want to achieve loosely coupling you should think about using a dependecy injection container (e.g. Unity or MEF).
",0How bad is to have many directories where to save uploaded data instead of one?,"I am using the following structure to save the images that users are uploading for their items:

Images

User_dir1

Item_dir1

Picture_file1
Picture_file2


User_dir2

Item_dir2

Picture_file3

Item_dir3

Picture_file4




Can I go on with this if I am going to have thousants of users and hundrets of items per user? Talking about performance will the Linux dedicated server have trouble in the future?
Thanks!
","Unless you'll need more than 65534 folders per directory you should be okay (apparently this is the maximum for NTFS)
",0